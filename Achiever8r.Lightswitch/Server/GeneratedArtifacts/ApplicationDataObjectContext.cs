//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("LightSwitchApplication", "Achievement_AchievementCategory", "AchievementCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.AchievementCategory), "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Achievement), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "Achievement_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.User), "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Achievement), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "Achievement_User1", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.User), "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Achievement), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "Rating_Achievement", "Achievement", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.Achievement), "Rating", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Rating), true)]
[assembly: EdmRelationshipAttribute("LightSwitchApplication", "Rating_User", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LightSwitchApplication.Implementation.User), "Rating", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LightSwitchApplication.Implementation.Rating), true)]

#endregion

namespace LightSwitchApplication.Implementation
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ApplicationData : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ApplicationData object using the connection string found in the 'ApplicationData' section of the application configuration file.
        /// </summary>
        public ApplicationData() : base("name=ApplicationData", "ApplicationData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ApplicationData object.
        /// </summary>
        public ApplicationData(string connectionString) : base(connectionString, "ApplicationData")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ApplicationData object.
        /// </summary>
        public ApplicationData(EntityConnection connection) : base(connection, "ApplicationData")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AchievementCategory> AchievementCategories
        {
            get
            {
                if ((_AchievementCategories == null))
                {
                    _AchievementCategories = base.CreateObjectSet<AchievementCategory>("AchievementCategories");
                }
                return _AchievementCategories;
            }
        }
        private ObjectSet<AchievementCategory> _AchievementCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Achievement> Achievements
        {
            get
            {
                if ((_Achievements == null))
                {
                    _Achievements = base.CreateObjectSet<Achievement>("Achievements");
                }
                return _Achievements;
            }
        }
        private ObjectSet<Achievement> _Achievements;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Rating> Ratings
        {
            get
            {
                if ((_Ratings == null))
                {
                    _Ratings = base.CreateObjectSet<Rating>("Ratings");
                }
                return _Ratings;
            }
        }
        private ObjectSet<Rating> _Ratings;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AchievementCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAchievementCategories(AchievementCategory achievementCategory)
        {
            base.AddObject("AchievementCategories", achievementCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Achievements EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAchievements(Achievement achievement)
        {
            base.AddObject("Achievements", achievement);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Ratings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRatings(Rating rating)
        {
            base.AddObject("Ratings", rating);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Achievement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Achievement : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Achievement object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="rowVersion">Initial value of the RowVersion property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="nominatedOn">Initial value of the NominatedOn property.</param>
        /// <param name="achievement_AchievementCategory">Initial value of the Achievement_AchievementCategory property.</param>
        /// <param name="achievement_User">Initial value of the Achievement_User property.</param>
        /// <param name="achievement_User1">Initial value of the Achievement_User1 property.</param>
        public static Achievement CreateAchievement(global::System.Int32 id, global::System.Byte[] rowVersion, global::System.String description, global::System.DateTime nominatedOn, global::System.Int32 achievement_AchievementCategory, global::System.Int32 achievement_User, global::System.Int32 achievement_User1)
        {
            Achievement achievement = new Achievement();
            achievement.Id = id;
            achievement.RowVersion = rowVersion;
            achievement.Description = description;
            achievement.NominatedOn = nominatedOn;
            achievement.Achievement_AchievementCategory = achievement_AchievementCategory;
            achievement.Achievement_User = achievement_User;
            achievement.Achievement_User1 = achievement_User1;
            return achievement;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = value;
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] RowVersion
        {
            get
            {
                return StructuralObject.GetValidValue(_RowVersion);
            }
            set
            {
                OnRowVersionChanging(value);
                ReportPropertyChanging("RowVersion");
                _RowVersion = value;
                ReportPropertyChanged("RowVersion");
                OnRowVersionChanged();
            }
        }
        private global::System.Byte[] _RowVersion;
        partial void OnRowVersionChanging(global::System.Byte[] value);
        partial void OnRowVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = value;
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime NominatedOn
        {
            get
            {
                return _NominatedOn;
            }
            set
            {
                OnNominatedOnChanging(value);
                ReportPropertyChanging("NominatedOn");
                _NominatedOn = value;
                ReportPropertyChanged("NominatedOn");
                OnNominatedOnChanged();
            }
        }
        private global::System.DateTime _NominatedOn;
        partial void OnNominatedOnChanging(global::System.DateTime value);
        partial void OnNominatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Achievement_AchievementCategory
        {
            get
            {
                return _Achievement_AchievementCategory;
            }
            set
            {
                OnAchievement_AchievementCategoryChanging(value);
                ReportPropertyChanging("Achievement_AchievementCategory");
                _Achievement_AchievementCategory = value;
                ReportPropertyChanged("Achievement_AchievementCategory");
                OnAchievement_AchievementCategoryChanged();
            }
        }
        private global::System.Int32 _Achievement_AchievementCategory;
        partial void OnAchievement_AchievementCategoryChanging(global::System.Int32 value);
        partial void OnAchievement_AchievementCategoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Achievement_User
        {
            get
            {
                return _Achievement_User;
            }
            set
            {
                OnAchievement_UserChanging(value);
                ReportPropertyChanging("Achievement_User");
                _Achievement_User = value;
                ReportPropertyChanged("Achievement_User");
                OnAchievement_UserChanged();
            }
        }
        private global::System.Int32 _Achievement_User;
        partial void OnAchievement_UserChanging(global::System.Int32 value);
        partial void OnAchievement_UserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Achievement_User1
        {
            get
            {
                return _Achievement_User1;
            }
            set
            {
                OnAchievement_User1Changing(value);
                ReportPropertyChanging("Achievement_User1");
                _Achievement_User1 = value;
                ReportPropertyChanged("Achievement_User1");
                OnAchievement_User1Changed();
            }
        }
        private global::System.Int32 _Achievement_User1;
        partial void OnAchievement_User1Changing(global::System.Int32 value);
        partial void OnAchievement_User1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Achievement_AchievementCategory", "AchievementCategory")]
        public AchievementCategory AchievementCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AchievementCategory>("LightSwitchApplication.Achievement_AchievementCategory", "AchievementCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AchievementCategory>("LightSwitchApplication.Achievement_AchievementCategory", "AchievementCategory").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AchievementCategory> AchievementCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AchievementCategory>("LightSwitchApplication.Achievement_AchievementCategory", "AchievementCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AchievementCategory>("LightSwitchApplication.Achievement_AchievementCategory", "AchievementCategory", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Achievement_User", "User")]
        public User AchievedByUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Achievement_User", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Achievement_User", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> AchievedByUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Achievement_User", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("LightSwitchApplication.Achievement_User", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Achievement_User1", "User")]
        public User NominatedByUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Achievement_User1", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Achievement_User1", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> NominatedByUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Achievement_User1", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("LightSwitchApplication.Achievement_User1", "User", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Rating_Achievement", "Rating")]
        public EntityCollection<Rating> Ratings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Rating>("LightSwitchApplication.Rating_Achievement", "Rating");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Rating>("LightSwitchApplication.Rating_Achievement", "Rating", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="AchievementCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AchievementCategory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AchievementCategory object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="rowVersion">Initial value of the RowVersion property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static AchievementCategory CreateAchievementCategory(global::System.Int32 id, global::System.Byte[] rowVersion, global::System.String description)
        {
            AchievementCategory achievementCategory = new AchievementCategory();
            achievementCategory.Id = id;
            achievementCategory.RowVersion = rowVersion;
            achievementCategory.Description = description;
            return achievementCategory;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = value;
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] RowVersion
        {
            get
            {
                return StructuralObject.GetValidValue(_RowVersion);
            }
            set
            {
                OnRowVersionChanging(value);
                ReportPropertyChanging("RowVersion");
                _RowVersion = value;
                ReportPropertyChanged("RowVersion");
                OnRowVersionChanged();
            }
        }
        private global::System.Byte[] _RowVersion;
        partial void OnRowVersionChanging(global::System.Byte[] value);
        partial void OnRowVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = value;
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Achievement_AchievementCategory", "Achievement")]
        public EntityCollection<Achievement> Achievements
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Achievement>("LightSwitchApplication.Achievement_AchievementCategory", "Achievement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Achievement>("LightSwitchApplication.Achievement_AchievementCategory", "Achievement", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="Rating")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Rating : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Rating object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="rowVersion">Initial value of the RowVersion property.</param>
        /// <param name="ratedOn">Initial value of the RatedOn property.</param>
        /// <param name="comment">Initial value of the Comment property.</param>
        /// <param name="rating_Achievement">Initial value of the Rating_Achievement property.</param>
        /// <param name="rating_User">Initial value of the Rating_User property.</param>
        public static Rating CreateRating(global::System.Int32 id, global::System.Byte[] rowVersion, global::System.DateTime ratedOn, global::System.String comment, global::System.Int32 rating_Achievement, global::System.Int32 rating_User)
        {
            Rating rating = new Rating();
            rating.Id = id;
            rating.RowVersion = rowVersion;
            rating.RatedOn = ratedOn;
            rating.Comment = comment;
            rating.Rating_Achievement = rating_Achievement;
            rating.Rating_User = rating_User;
            return rating;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = value;
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] RowVersion
        {
            get
            {
                return StructuralObject.GetValidValue(_RowVersion);
            }
            set
            {
                OnRowVersionChanging(value);
                ReportPropertyChanging("RowVersion");
                _RowVersion = value;
                ReportPropertyChanged("RowVersion");
                OnRowVersionChanged();
            }
        }
        private global::System.Byte[] _RowVersion;
        partial void OnRowVersionChanging(global::System.Byte[] value);
        partial void OnRowVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime RatedOn
        {
            get
            {
                return _RatedOn;
            }
            set
            {
                OnRatedOnChanging(value);
                ReportPropertyChanging("RatedOn");
                _RatedOn = value;
                ReportPropertyChanged("RatedOn");
                OnRatedOnChanged();
            }
        }
        private global::System.DateTime _RatedOn;
        partial void OnRatedOnChanging(global::System.DateTime value);
        partial void OnRatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = value;
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Rating_Achievement
        {
            get
            {
                return _Rating_Achievement;
            }
            set
            {
                OnRating_AchievementChanging(value);
                ReportPropertyChanging("Rating_Achievement");
                _Rating_Achievement = value;
                ReportPropertyChanged("Rating_Achievement");
                OnRating_AchievementChanged();
            }
        }
        private global::System.Int32 _Rating_Achievement;
        partial void OnRating_AchievementChanging(global::System.Int32 value);
        partial void OnRating_AchievementChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Rating_User
        {
            get
            {
                return _Rating_User;
            }
            set
            {
                OnRating_UserChanging(value);
                ReportPropertyChanging("Rating_User");
                _Rating_User = value;
                ReportPropertyChanged("Rating_User");
                OnRating_UserChanged();
            }
        }
        private global::System.Int32 _Rating_User;
        partial void OnRating_UserChanging(global::System.Int32 value);
        partial void OnRating_UserChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Rating_Achievement", "Achievement")]
        public Achievement Achievement
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Achievement>("LightSwitchApplication.Rating_Achievement", "Achievement").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Achievement>("LightSwitchApplication.Rating_Achievement", "Achievement").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Achievement> AchievementReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Achievement>("LightSwitchApplication.Rating_Achievement", "Achievement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Achievement>("LightSwitchApplication.Rating_Achievement", "Achievement", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Rating_User", "User")]
        public User RatedByUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Rating_User", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Rating_User", "User").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> RatedByUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("LightSwitchApplication.Rating_User", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("LightSwitchApplication.Rating_User", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LightSwitchApplication", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="rowVersion">Initial value of the RowVersion property.</param>
        /// <param name="loginId">Initial value of the LoginId property.</param>
        /// <param name="fullName">Initial value of the FullName property.</param>
        public static User CreateUser(global::System.Int32 id, global::System.Byte[] rowVersion, global::System.String loginId, global::System.String fullName)
        {
            User user = new User();
            user.Id = id;
            user.RowVersion = rowVersion;
            user.LoginId = loginId;
            user.FullName = fullName;
            return user;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = value;
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] RowVersion
        {
            get
            {
                return StructuralObject.GetValidValue(_RowVersion);
            }
            set
            {
                OnRowVersionChanging(value);
                ReportPropertyChanging("RowVersion");
                _RowVersion = value;
                ReportPropertyChanged("RowVersion");
                OnRowVersionChanged();
            }
        }
        private global::System.Byte[] _RowVersion;
        partial void OnRowVersionChanging(global::System.Byte[] value);
        partial void OnRowVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoginId
        {
            get
            {
                return _LoginId;
            }
            set
            {
                OnLoginIdChanging(value);
                ReportPropertyChanging("LoginId");
                _LoginId = value;
                ReportPropertyChanged("LoginId");
                OnLoginIdChanged();
            }
        }
        private global::System.String _LoginId;
        partial void OnLoginIdChanging(global::System.String value);
        partial void OnLoginIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = value;
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Achievement_User", "Achievement")]
        public EntityCollection<Achievement> Achievements
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Achievement>("LightSwitchApplication.Achievement_User", "Achievement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Achievement>("LightSwitchApplication.Achievement_User", "Achievement", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Achievement_User1", "Achievement")]
        public EntityCollection<Achievement> AchievementNominations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Achievement>("LightSwitchApplication.Achievement_User1", "Achievement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Achievement>("LightSwitchApplication.Achievement_User1", "Achievement", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("LightSwitchApplication", "Rating_User", "Rating")]
        public EntityCollection<Rating> Ratings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Rating>("LightSwitchApplication.Rating_User", "Rating");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Rating>("LightSwitchApplication.Rating_User", "Rating", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
